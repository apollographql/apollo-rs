// Legend:
//
//   //          -- comment
//   Name =      -- non-terminal definition
//   'ident'     -- token (terminal)
//   A B         -- sequence
//   A | B       -- alternation
//   A*          -- zero or more repetition
//   A?          -- zero or one repetition
//   (A)         -- same as A
//   label:A     -- suggested name for field of AST node

Name =
  'ident'

Document =
  Definition*

Definition =
  OperationDefinition
  | FragmentDefinition
  | DirectiveDefinition
  | SchemaDefinition
  // Type Definitions
  | ScalarTypeDefinition
  | ObjectTypeDefinition
  | InterfaceTypeDefinition
  | UnionTypeDefinition
  | EnumTypeDefinition
  | InputObjectTypeDefinition
  // Type System Extensions: we may possible want to group those in an enum outside of 'Definition'
  | SchemaExtension
  // Type Extensions
  | ScalarTypeExtension
  | ObjectTypeExtension
  | InterfaceTypeExtension
  | UnionTypeExtension
  | EnumTypeExtension
  | InputObjectTypeExtension

OperationDefinition =
  OperationType Name? VariableDefinitions? Directives? SelectionSet
  | SelectionSet

OperationType =
  'query'
  | 'mutation'
  | 'subscription'

SelectionSet =
  '{' Selection* '}'

Selection =
  Field
  | FragmentSpread
  | InlineFragment

Field =
  Alias? Name Arguments? Directives? SelectionSet?

Alias =
  Name ':'

Arguments =
  '(' Argument* ')'

Argument =
  Name ':' Value

FragmentSpread =
  '...' FragmentName Directives?

InlineFragment =
  '...' TypeCondition? Directives? SelectionSet

FragmentDefinition =
  'fragment' FragmentName TypeCondition Directives? SelectionSet

FragmentName =
  Name

TypeCondition =
  'on' NamedType

Value =
  Variable
  | StringValue
  | FloatValue
  | IntValue
  | BooleanValue
  | NullValue
  | EnumValue
  | ListValue
  | ObjectValue

StringValue =
  'string'

FloatValue =
  'float'

IntValue =
  'int'

BooleanValue =
  'true'
  | 'false'

NullValue =
  'null'

EnumValue =
  Name

ListValue =
  '[' ']'
  '[' Value* ']'

ObjectValue =
 '{' '}'
 '{' ObjectField* '}'

ObjectField =
  Name ':' Value

VariableDefinitions =
  '(' VariableDefinition* ')'

VariableDefinition =
  Variable ':' Type DefaultValue? Directives?

Variable =
  '$' Name

DefaultValue =
  '=' Value

Type =
  NamedType
  | ListType
  | NonNullType

NamedType =
  Name

ListType =
  '[' Type ']'

NonNullType =
  NamedType '!'
  | ListType '!'

Directives =
  Directive*

Directive =
  '@' Name Arguments?

SchemaDefinition =
  Description? 'schema' Directives? '{' RootOperationTypeDefinition* '}'

SchemaExtension =
  'extend' 'schema' Directives? '{' RootOperationTypeDefinition* '}'
  | 'extend' 'schema' Directives

RootOperationTypeDefinition =
  OperationType ':' NamedType

Description =
  StringValue

ScalarTypeDefinition =
  Description? 'scalar' Name Directives?

ScalarTypeExtension =
  'extend' 'scalar' Name Directives

ObjectTypeDefinition =
  Description? 'type' Name ImplementsInterfaces? Directives? FieldsDefinition?

ObjectTypeExtension =
  'extend' 'type' Name ImplementsInterfaces? Directives? FieldsDefinition
  | 'extend' 'type' Name ImplementsInterfaces? Directives
  | 'extend' 'type' Name ImplementsInterfaces

// In the spec, ImplementsInterfaces is defined as an enum of:
// ImplementsInterfaces =
//   'implements' '&'? NamedType
//   | ImplementsInterfaces '&' NamedType
//
// TODO @lrlna: think about a more accurate way of depicting this in our ungrammar file
// `(T ('&' T)* '&'?)`
// ` '&'? (NamedType '|')* NamedType`
ImplementsInterfaces =
  'implements' '&'? NamedType*

FieldsDefinition =
  '{' FieldDefinition* '}'

FieldDefinition =
  Description? Name ArgumentsDefinition? ':' Type Directives?

ArgumentsDefinition =
  '(' InputValueDefinition* ')'

InputValueDefinition =
  Description? Name ':' Type DefaultValue? Directives?

InterfaceTypeDefinition =
  Description? 'interface' Name ImplementsInterfaces? Directives? FieldsDefinition?

InterfaceTypeExtension =
  'extend' 'interface' Name ImplementsInterfaces? Directives? FieldsDefinition
  | 'extend' 'interface' Name ImplementsInterfaces? Directives
  | 'extend' 'interface' Name ImplementsInterfaces

UnionTypeDefinition =
  Description? 'union' Name Directives? UnionMemberTypes?

// In the spec, UnionMemberTypes is defined as an enum of:
// UnionMemberTypes =
//   '=' '|'? NamedType
//    | UnionMemberTypes '|' NamedType
//
// TODO @lrlna: think about a more accurate way of depicting this in our ungrammar file
// `(T ('|' T)* '|'?)`
// `'=' '|'? (NamedType '|')* NamedType`
UnionMemberTypes =
  '=' '|'? NamedType*

UnionTypeExtension =
  'extend' 'union' Name Directives? UnionMemberTypes
  | 'extend' 'union' Name Directives

EnumTypeDefinition =
  Description? 'enum' Name Directives? EnumValuesDefinition?

EnumValuesDefinition =
  '{' EnumValueDefinition* '}'

EnumValueDefinition =
  Description? EnumValue Directives?

EnumTypeExtension =
  'extend' 'enum' Name Directives? EnumValuesDefinition
  | 'extend' 'enum' Name Directives

InputObjectTypeDefinition =
  Description? 'input' Name Directives? InputFieldsDefinition?

InputFieldsDefinition =
  '{' InputValueDefinition* '}'

InputObjectTypeExtension =
  'extend' 'input' Name Directives? InputFieldsDefinition
  | 'extend' 'input' Name Directives?

DirectiveDefinition =
  Description? 'directive' '@' Name ArgumentsDefinition? 'repeatable'? 'on' DirectiveLocations

// In the spec, DirectiveLocations is defined as an enum of:
// DirectiveLocations
//   '|'? DirectiveLocation
//    | DirectiveLocations '|' DirectiveLocation
//
// TODO @lrlna: think about a more accurate way of depicting this in our ungrammar file
DirectiveLocations =
  DirectiveLocation*

DirectiveLocation =
  'QUERY'
  | 'MUTATION'
  | 'SUBSCRIPTION'
  | 'FIELD'
  | 'FRAGMENT_DEFINITION'
  | 'FRAGMENT_SPREAD'
  | 'INLINE_FRAGMENT'
  | 'VARIABLE_DEFINITION'
  | 'SCHEMA'
  | 'SCALAR'
  | 'OBJECT'
  | 'FIELD_DEFINITION'
  | 'ARGUMENT_DEFINITION'
  | 'INTERFACE'
  | 'UNION'
  | 'ENUM'
  | 'ENUM_VALUE'
  | 'INPUT_OBJECT'
  | 'INPUT_FIELD_DEFINITION'