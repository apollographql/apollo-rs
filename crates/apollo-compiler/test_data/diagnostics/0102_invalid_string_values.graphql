type ComplicatedArgs {
  # TODO List
  # TODO Coercion
  # TODO NotNulls
  intArgField(intArg: Int): String
  nonNullIntArgField(nonNullIntArg: Int!): String
  stringArgField(stringArg: String): String
  booleanArgField(booleanArg: Boolean): String
  enumArgField(enumArg: FurColor): String
  floatArgField(floatArg: Float): String
  idArgField(idArg: ID): String
  stringListArgField(stringListArg: [String]): String
  stringListNonNullArgField(stringListNonNullArg: [String!]): String
  complexArgField(complexArg: ComplexInput): String
  multipleReqs(req1: Int!, req2: Int!): String
  nonNullFieldWithDefault(arg: Int! = 0): String
  multipleOpts(opt1: Int = 0, opt2: Int = 0): String
  multipleOptAndReq(req1: Int!, req2: Int!, opt1: Int = 0, opt2: Int = 0): String
}

enum FurColor {
  BROWN
  BLACK
  TAN
  SPOTTED
  NO_FUR
  UNKNOWN
}

input ComplexInput {
  requiredField: Boolean!
  nonNullField: Boolean! = false
  intField: Int
  stringField: String
  booleanField: Boolean
  stringListField: [String]
}

enum DogCommand {
  SIT
  HEEL
  DOWN
}

type Dog {
  doesKnowCommand(dogCommand: DogCommand): Boolean
  name(surname: Boolean): String
}

type Query {
    complicatedArgs: ComplicatedArgs
    dog: Dog
}

query intIntoString {
  complicatedArgs {
    stringArgField(stringArg: 1)
  }
}

query floatIntoString {
  complicatedArgs {
    stringArgField(stringArg: 1.0)
  }
}

query booleanIntoString {
  complicatedArgs {
    stringArgField(stringArg: true)
  }
}

query unquotedStringIntoString {
  complicatedArgs {
    stringArgField(stringArg: BAR)
  }
}

query stringIntoInt {
  complicatedArgs {
    intArgField(intArg: "3")
  }
}

#query bigIntIntoInt {
#  complicatedArgs {
#    intArgField(intArg: 829384293849283498239482938)
#  }
#}