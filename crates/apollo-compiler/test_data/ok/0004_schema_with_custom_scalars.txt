Schema {
    sources: {
        1: SourceFile {
            path: "built_in.graphql",
            source_text: include_str!("built_in.graphql"),
        },
        6: SourceFile {
            path: "0004_schema_with_custom_scalars.graphql",
            source_text: "type Query {\n  website: URL,\n  amount: Int\n}\n\nscalar URL @specifiedBy(url: \"https://tools.ietf.org/html/rfc3986\")",
        },
    },
    schema_definition: SchemaDefinition {
        description: None,
        directives: [],
        query: Some(
            ComponentName {
                origin: Definition,
                name: "Query",
            },
        ),
        mutation: None,
        subscription: None,
    },
    directive_definitions: {
        "skip": built_in_directive!("skip"),
        "include": built_in_directive!("include"),
        "deprecated": built_in_directive!("deprecated"),
        "specifiedBy": built_in_directive!("specifiedBy"),
    },
    types: {
        "__Schema": built_in_type!("__Schema"),
        "__Type": built_in_type!("__Type"),
        "__TypeKind": built_in_type!("__TypeKind"),
        "__Field": built_in_type!("__Field"),
        "__InputValue": built_in_type!("__InputValue"),
        "__EnumValue": built_in_type!("__EnumValue"),
        "__Directive": built_in_type!("__Directive"),
        "__DirectiveLocation": built_in_type!("__DirectiveLocation"),
        "Int": built_in_type!("Int"),
        "Float": built_in_type!("Float"),
        "String": built_in_type!("String"),
        "Boolean": built_in_type!("Boolean"),
        "ID": built_in_type!("ID"),
        "Query": Object(
            0..44 @6 ObjectType {
                description: None,
                name: "Query",
                implements_interfaces: {},
                directives: [],
                fields: {
                    "website": Component {
                        origin: Definition,
                        node: 15..27 @6 FieldDefinition {
                            description: None,
                            name: "website",
                            arguments: [],
                            ty: Named(
                                "URL",
                            ),
                            directives: [],
                        },
                    },
                    "amount": Component {
                        origin: Definition,
                        node: 31..42 @6 FieldDefinition {
                            description: None,
                            name: "amount",
                            arguments: [],
                            ty: Named(
                                "Int",
                            ),
                            directives: [],
                        },
                    },
                },
            },
        ),
        "URL": Scalar(
            46..113 @6 ScalarType {
                description: None,
                name: "URL",
                directives: [
                    Component {
                        origin: Definition,
                        node: 57..113 @6 Directive {
                            name: "specifiedBy",
                            arguments: [
                                70..112 @6 Argument {
                                    name: "url",
                                    value: 75..112 @6 String(
                                        "https://tools.ietf.org/html/rfc3986",
                                    ),
                                },
                            ],
                        },
                    },
                ],
            },
        ),
    },
}
ExecutableDocument {
    sources: {
        1: SourceFile {
            path: "built_in.graphql",
            source_text: include_str!("built_in.graphql"),
        },
        6: SourceFile {
            path: "0004_schema_with_custom_scalars.graphql",
            source_text: "type Query {\n  website: URL,\n  amount: Int\n}\n\nscalar URL @specifiedBy(url: \"https://tools.ietf.org/html/rfc3986\")",
        },
    },
    operations: OperationMap {
        anonymous: None,
        named: {},
    },
    fragments: {},
}
