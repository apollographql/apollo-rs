type ComplicatedArgs {
  # TODO List
  # TODO Coercion
  # TODO NotNulls
  intArgField(intArg: Int): String
  nonNullIntArgField(nonNullIntArg: Int!): String
  stringArgField(stringArg: String): String
  booleanArgField(booleanArg: Boolean): String
  enumArgField(enumArg: FurColor): String
  floatArgField(floatArg: Float): String
  idArgField(idArg: ID): String
  stringListArgField(stringListArg: [String]): String
  stringListNonNullArgField(stringListNonNullArg: [String!]): String
  complexArgField(complexArg: ComplexInput): String
  multipleReqs(req1: Int!, req2: Int!): String
  nonNullFieldWithDefault(arg: Int! = 0): String
  multipleOpts(opt1: Int = 0, opt2: Int = 0): String
  multipleOptAndReq(req1: Int!, req2: Int!, opt1: Int = 0, opt2: Int = 0): String
}

enum FurColor {
  BROWN
  BLACK
  TAN
  SPOTTED
  NO_FUR
  UNKNOWN
}

input ComplexInput {
  requiredField: Boolean!
  nonNullField: Boolean! = false
  intField: Int
  stringField: String
  booleanField: Boolean
  stringListField: [String]
}

enum DogCommand {
  SIT
  HEEL
  DOWN
}

type Dog {
  doesKnowCommand(dogCommand: DogCommand): Boolean
  name(surname: Boolean): String
}

type Query {
    complicatedArgs: ComplicatedArgs
    dog: Dog
}

query goodIntValue {
  complicatedArgs {
    intArgField(intArg: 2)
  }
}
query goodNegativeIntValue{
  complicatedArgs {
    intArgField(intArg: -2)
  }
}

query goodBooleanValue {
  complicatedArgs {
    booleanArgField(booleanArg: true)
  }
}

query goodStringValue {
  complicatedArgs {
    stringArgField(stringArg: "foo")
  }
}

query goodFloatValue {
  complicatedArgs {
    floatArgField(floatArg: 1.1)
  }
}

query goodNegativeFloatValue {
  complicatedArgs {
    floatArgField(floatArg: -1.1)
  }
}

query intIntoFloat {
  complicatedArgs {
    floatArgField(floatArg: 1)
  }
}

query intIntoID {
  complicatedArgs {
    idArgField(idArg: 1)
  }
}

query stringIntoID {
  complicatedArgs {
    idArgField(idArg: "someIdString")
  }
}

query goodEnumValue {
  dog {
    doesKnowCommand(dogCommand: SIT)
  }
}

query enumWithUndefinedValue {
  complicatedArgs {
    enumArgField(enumArg: UNKNOWN)
  }
}

query enumWithNullValue {
  complicatedArgs {
    enumArgField(enumArg: null)
  }
}

query nullIntoNullableType {
  complicatedArgs {
    intArgField(intArg: null)
  }
}