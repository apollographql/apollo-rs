type ComplicatedArgs {
  # TODO List
  # TODO Coercion
  # TODO NotNulls
  intArgField(intArg: Int): String
  nonNullIntArgField(nonNullIntArg: Int!): String
  stringArgField(stringArg: String): String
  booleanArgField(booleanArg: Boolean): String
  enumArgField(enumArg: FurColor): String
  floatArgField(floatArg: Float): String
  idArgField(idArg: ID): String
  stringListArgField(stringListArg: [String]): String
  stringListNonNullArgField(stringListNonNullArg: [String!]): String
  complexArgField(complexArg: ComplexInput): String
  multipleReqs(req1: Int!, req2: Int!): String
  nonNullFieldWithDefault(arg: Int! = 0): String
  multipleOpts(opt1: Int = 0, opt2: Int = 0): String
  multipleOptAndReq(req1: Int!, req2: Int!, opt1: Int = 0, opt2: Int = 0): String
}

enum FurColor {
  BROWN
  BLACK
  TAN
  SPOTTED
  NO_FUR
  UNKNOWN
}

input ComplexInput {
  requiredField: Boolean!
  nonNullField: Boolean! = false
  intField: Int
  stringField: String
  booleanField: Boolean
  stringListField: [String]
}

enum DogCommand {
  SIT
  HEEL
  DOWN
}

type Dog {
  doesKnowCommand(dogCommand: DogCommand): Boolean
  name(surname: Boolean): String
  isHouseTrained(atOtherHomes: Boolean = true): Boolean
}

interface Pet {
  name(surname: Boolean): String
}

type Query {
  complicatedArgs: ComplicatedArgs
  dog: Dog
  human(id: ID): Human
}

type Human {
  name(surname: Boolean): String
  pets: [Pet]
  relatives: [Human]!
}

query goodIntValue {
  complicatedArgs {
    intArgField(intArg: 2)
  }
}

query goodNegativeIntValue{
  complicatedArgs {
    intArgField(intArg: -2)
  }
}

query goodBooleanValue {
  complicatedArgs {
    booleanArgField(booleanArg: true)
  }
}

query goodStringValue {
  complicatedArgs {
    stringArgField(stringArg: "foo")
  }
}

query goodFloatValue {
  complicatedArgs {
    floatArgField(floatArg: 1.1)
  }
}

query goodNegativeFloatValue {
  complicatedArgs {
    floatArgField(floatArg: -1.1)
  }
}

query intIntoFloat {
  complicatedArgs {
    floatArgField(floatArg: 1)
  }
}

query intIntoID {
  complicatedArgs {
    idArgField(idArg: 1)
  }
}

query stringIntoID {
  complicatedArgs {
    idArgField(idArg: "someIdString")
  }
}

query goodEnumValue {
  dog {
    doesKnowCommand(dogCommand: SIT)
  }
}

query enumWithUndefinedValue {
  complicatedArgs {
    enumArgField(enumArg: UNKNOWN)
  }
}

query enumWithNullValue {
  complicatedArgs {
    enumArgField(enumArg: null)
  }
}

query nullIntoNullableType {
  complicatedArgs {
    intArgField(intArg: null)
  }
}

query goodListValue {
  complicatedArgs {
    stringListArgField(stringListArg: ["one", null, "two"])
  }
}

query emptyListValue {
  complicatedArgs {
    stringListArgField(stringListArg: [])
  }
}

query nullListValue {
  complicatedArgs {
    stringListArgField(stringListArg: null)
  }
}

query singleValueIntoList {
  complicatedArgs {
    stringListArgField(stringListArg: "one")
  }
}

# Valid Non-Nullable Value
query argOnOptionalArg {
  dog {
    isHouseTrained(atOtherHomes: true)
  }
}

query noArgOnOptionalArg {
  dog {
    isHouseTrained
  }
}

query multipleArgs {
  complicatedArgs {
    multipleReqs(req1: 1, req2: 2)
  }
}

query multiplArgsReverseOrder {
  complicatedArgs {
    multipleReqs(req2: 2, req1: 1)
  }
}

query noArgsOnMultipleOptional {
  complicatedArgs {
    multipleOpts
  }
}

query oneArgOnMultipleOptional {
  complicatedArgs {
    multipleOpts(opt1: 1)
  }
}

query secondArgOnMultipleOptional {
  complicatedArgs {
    multipleOpts(opt2: 1)
  }
}

query multipleRequiredArgsOnMixedList {
  complicatedArgs {
    multipleOptAndReq(req1: 3, req2: 4)
  }
}

query multipleRequiredAndOneOptionalArgOnMixedList {
  complicatedArgs {
    multipleOptAndReq(req1: 3, req2: 4, opt1: 5)
  }
}

query AllRequiredAndOptionalArgsOnMixedList {
  complicatedArgs {
    multipleOptAndReq(req1: 3, req2: 4, opt1: 5, opt2: 6)
  }
}

# Valid input object value
query optionalArgDespiteRequiredFieldInType {
  complicatedArgs {
    complexArgField
  }
}

query partialObjectOnlyRequired {
  complicatedArgs {
    complexArgField(complexArg: { requiredField: true })
  }
}

query partialObjectRequiredFieldCanBeFalse {
  complicatedArgs {
    complexArgField(complexArg: { requiredField: false })
  }
}

query partialObjectIncludingRequired {
  complicatedArgs {
    complexArgField(complexArg: { requiredField: true, intField: 4 })
  }
}

query fullObject {
  complicatedArgs {
    complexArgField(complexArg: {
      requiredField: true,
      intField: 4,
      stringField: "foo",
      booleanField: false,
      stringListField: ["one", "two"]
    })
  }
}

query fullObjectWithFieldsInDifferentOrder {
  complicatedArgs {
    complexArgField(complexArg: {
      stringListField: ["one", "two"],
      booleanField: false,
      requiredField: true,
      stringField: "foo",
      intField: 4,
    })
  }
}

query withDirectivesOfValidTypes {
  dog @include(if: true) {
    name
  }
  human @skip(if: false) {
    name
  }
}


# Variable default values
query withDefaultValues(
  $a: Int = 1,
  $b: String = "ok",
  $c: ComplexInput = { requiredField: true, intField: 3 }
) {
  complicatedArgs {
    complexArgField(complexArg: $c)
    intArgField(intArg: $a)
    stringArgField(stringArg: $b)
  }
}

query variablesWithDefaultNullValues(
  $a: Int = null,
  $b: String = null,
  $c: ComplexInput = { requiredField: true, intField: null }
) {
  complicatedArgs {
    complexArgField(complexArg: $c)
    intArgField(intArg: $a)
    stringArgField(stringArg: $b)
  }

}