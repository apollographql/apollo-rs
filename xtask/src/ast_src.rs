pub(crate) struct KindsSrc<'a> {
    pub(crate) punct: &'a [(&'a str, &'a str)],
    pub(crate) keywords: &'a [&'a str],
    pub(crate) literals: &'a [&'a str],
    pub(crate) tokens: &'a [&'a str],
    pub(crate) nodes: &'a [&'a str],
}

pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {
    punct: &[
        ("!", "BANG"),
        ("(", "L_PAREN"),
        (")", "R_PAREN"),
        ("{", "L_CURLY"),
        ("}", "R_CURLY"),
        ("[", "L_BRACK"),
        ("]", "R_BRACK"),
        (",", "COMMA"),
        ("@", "AT"),
        ("$", "DOLLAR"),
        ("&", "AMP"),
        ("|", "PIPE"),
        ("...", "SPREAD"),
        ("=", "EQ"),
        (":", "COLON"),
    ],
    keywords: &[
        "query",
        "mutation",
        "repeatable",
        "subscription",
        "fragment",
        "on",
        "null",
        "extend",
        "schema",
        "scalar",
        "implements",
        "interface",
        "union",
        "enum",
        "input",
        "directive",
        "type",
        "true",
        "false",
        "QUERY",
        "MUTATION",
        "SUBSCRIPTION",
        "FIELD",
        "FRAGMENT_DEFINITION",
        "FRAGMENT_SPREAD",
        "INLINE_FRAGMENT",
        "VARIABLE_DEFINITION",
        "SCHEMA",
        "SCALAR",
        "OBJECT",
        "FIELD_DEFINITION",
        "ARGUMENT_DEFINITION",
        "INTERFACE",
        "UNION",
        "ENUM",
        "ENUM_VALUE",
        "INPUT_OBJECT",
        "INPUT_FIELD_DEFINITION",
    ],
    literals: &["INT", "FLOAT", "STRING"],
    tokens: &["IDENT", "WHITESPACE", "COMMENT", "ERROR"],
    // These are all the "DOCUMENT" items defined in the GraphQL spec --
    // https://spec.graphql.org/October2021/#sec-Appendix-Grammar-Summary.Document,
    // as well as items listed in the ungrammar file in the root directory.
    nodes: &[
        "NAME",
        "INTEGER_PART",
        "NEGATIVE_SIGN",
        "NON_ZERO_DIGIT",
        "DIGIT",
        "FRACTIONAL_PART",
        "EXPONENT_PART",
        "EXPONENT_INDICATOR",
        "SIGN",
        "DOCUMENT",
        "DEFINITION",
        "EXECUTABLE_DEFINITION",
        "TYPE_SYSTEM_DEFINITION",
        "TYPE_SYSTEM_EXTENSION",
        "OPERATION_DEFINITION",
        "FRAGMENT_DEFINITION",
        "OPERATION_TYPE",
        "DIRECTIVE",
        "DIRECTIVES",
        "SELECTION_SET",
        "SELECTION",
        "FIELD",
        "FRAGMENT_SPREAD",
        "INLINE_FRAGMENT",
        "ALIAS",
        "ARGUMENTS",
        "ARGUMENT",
        "VALUE",
        "STRING_VALUE",
        "INT_VALUE",
        "FLOAT_VALUE",
        "FRAGMENT_NAME",
        "TYPE_CONDITION",
        "VARIABLE",
        "BOOLEAN_VALUE",
        "NULL_VALUE",
        "ENUM_VALUE",
        "LIST_VALUE",
        "OBJECT_VALUE",
        "OBJECT_FIELD",
        "VARIABLE_DEFINITIONS",
        "VARIABLE_DEFINITION",
        "TYPE",
        "DEFAULT_VALUE",
        "NAMED_TYPE",
        "LIST_TYPE",
        "NON_NULL_TYPE",
        "SCHEMA_DEFINITION",
        "TYPE_DEFINITION",
        "DIRECTIVE_DEFINITION",
        "SCHEMA_EXTENSION",
        "TYPE_EXTENSION",
        "ROOT_OPERATION_TYPE_DEFINITION",
        "DESCRIPTION",
        "SCALAR_TYPE_DEFINITION",
        "OBJECT_TYPE_DEFINITION",
        "INTERFACE_TYPE_DEFINITION",
        "UNION_TYPE_DEFINITION",
        "ENUM_TYPE_DEFINITION",
        "INPUT_OBJECT_TYPE_DEFINITION",
        "SCALAR_TYPE_EXTENSION",
        "OBJECT_TYPE_EXTENSION",
        "INTERFACE_TYPE_EXTENSION",
        "UNION_TYPE_EXTENSION",
        "ENUM_TYPE_EXTENSION",
        "INPUT_OBJECT_TYPE_EXTENSION",
        "IMPLEMENTS_INTERFACES",
        "FIELDS_DEFINITION",
        "FIELD_DEFINITION",
        "ARGUMENTS_DEFINITION",
        "UNION_MEMBER_TYPES",
        "ENUM_VALUES_DEFINITION",
        "ENUM_VALUE_DEFINITION",
        "INPUT_FIELDS_DEFINITION",
        "INPUT_VALUE_DEFINITION",
        "DIRECTIVE_LOCATIONS",
        "DIRECTIVE_LOCATION",
        "EXECUTABLE_DIRECTIVE_LOCATION",
        "TYPE_SYSTEM_DIRECTIVE_LOCATION",
    ],
};

// pub(crate) tokens is actually used once the code is generated.
#[allow(dead_code)]
#[derive(Default, Debug)]
pub(crate) struct AstSrc {
    pub(crate) tokens: Vec<String>,
    pub(crate) nodes: Vec<AstNodeSrc>,
    pub(crate) enums: Vec<AstEnumSrc>,
}

#[derive(Debug)]
pub(crate) struct AstNodeSrc {
    pub(crate) doc: Vec<String>,
    pub(crate) name: String,
    pub(crate) traits: Vec<String>,
    pub(crate) fields: Vec<Field>,
}

#[derive(Debug, Eq, PartialEq)]
pub(crate) enum Field {
    Token(String),
    Node {
        name: String,
        ty: String,
        cardinality: Cardinality,
    },
}

#[derive(Debug, Eq, PartialEq)]
pub(crate) enum Cardinality {
    Optional,
    Many,
}

#[derive(Debug, Clone)]
pub(crate) struct AstEnumSrc {
    pub(crate) doc: Vec<String>,
    pub(crate) name: String,
    pub(crate) traits: Vec<String>,
    pub(crate) variants: Vec<String>,
}
